# AUTOGENERATED! DO NOT EDIT! File to edit: 00_utils.ipynb (unless otherwise specified).

__all__ = ['trim_video', 'get_resolution', 'get_fps', 'trim_audio']

# Internal Cell
import subprocess
from subprocess import CalledProcessError
from nbdev.showdoc import *
from pathlib import Path
import os

# Internal Cell
class URLs:
    base = 'https://staging.deepword.co:3000/api'
    credits_url = f'{base}/api_get_credits/'
    list_vids_url = f'{base}/list_video_api/'
    txt2speech_url = f'{base}/api_text_to_speech/'
    download_vid_url = f'{base}/api_download_video/'
    download_yt_vid_url = f'{base}/api_download_youtube_video/'
    generate_vid_url = f'{base}/generate_video_api'
    validate_token_url = f'{base}/check_apikey'
    api_get_sample_file = f'{base}/api_get_sample_file'

# Internal Cell
def _file_exists(x): return Path(x).exists()

# Cell
def trim_video(video, start, end, outfile = None):
    """
    Crop a video in place from start to end. If you don't want to crop inplace, provide output filename.
    For youtube videos you can `download_youtube_video` before cropping it
    """
    raise NotImplementedError

# Cell
def get_resolution(video):
    "Get the resolution of a video"
    if not _file_exists(video):
        raise FileNotFoundError(f'{video} was not found, make sure you provide the correct file path')
    else:
        cmd = f'ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of default=nw=1:nk=1 {video}'
        try:
            op = subprocess.check_output(cmd, shell = True)
        except CalledProcessError as e:
            print(e.output)
        h,w,_ = op.decode('utf-8').split('\n')
        return int(h), int(w)

# Cell
def get_fps(video):
    "Get the fps of a video"
    if not _file_exists(video):
        raise FileNotFoundError(f'{video} was not found, make sure you provide the correct file path')
    cmd = f'ffprobe -v error -select_streams v -of default=noprint_wrappers=1:nokey=1 -show_entries stream=r_frame_rate {video}'
    try:
        op = subprocess.check_output(cmd, shell = True).decode('utf-8')
    except CalledProcessError as e:
        print(e.output)
    op = op.strip().split('/')
    op = list(map(int, op))
    return round(op[0] / op[1]) if op[1] != 0 else None

# Cell
def trim_audio(audio, start, end, outfile = None):
    """
    Crop an audio in place from start to end. If you don't want to crop inplace, provide output filename.
    """
    raise NotImplementedError